//
//  PowerSeries.h
//  BoolConcepts Framework
//
//  Created by NL on 9/9/15.
//  Copyright (c) 2015 Nur Lan. All rights reserved.
//

#import "BoolPolynomial.h"
#import "BoolConcept.h"
#import "BooleanVector.h"
#import "BoolConceptObject.h"
#import <Foundation/Foundation.h>

@class BoolPolynomial;
@class BoolConcept;

/*! @class PowerSeries
 Handles the generation of the minimal, unique power series. Most methods are Objective-C implementations of the Matlab code offered by Feldman on http://ruccs.rutgers.edu/~jacob/demos/algebra.html
 */

@interface PowerSeries : NSObject

/*! the boolean concept to generate the series and spectrum for. Weak because mutually linked from concept. */
@property (nonatomic, weak) BoolConcept* booleanConcept;
/*! An array of BoolPolynomials representing the power series */
@property NSMutableArray* powerSeries;
/*! An array of values representing the number of polynomials for each K */
@property NSMutableArray* powerSpectrum;
/*! A scalar representing the K+1 complexity for the concept. See Feldman (2006) for explanation */
@property NSUInteger conceptComplexity;

/*! Generate the power series of the current concept (self.booleanConcept)
 @returns Array of BoolPolynomial's representing the power series
 */
-(void)generatePowerSeries;
/*! Sorts the power series into a power spectrum, keeps buckets of K values and counts number of polynomials in each K */
-(void)generateSpectrum;
/*! Calculates the weighed K+1 complexity of power series, see Feldman (2006)
 */
-(void)calculateComplexity;

/*! Checks if the candidate polynomial is correct for the given concept, and non-trivial. It is correct if it only produces objects within the concept, and non-trivial if in combination with the existing theory it generates a new model different from the current one.
 @param candidate_poly The candidate polynomial to check
 @param current_theory The current collection of polynomials agreed to create the concept, sorted by K ascending order
 @param current_model the current collection of objects generated by the current theory
 @return YES if polynomial is correct and nontrivial
 */
-(BOOL)is_polynomial_correct_and_nontrivial:(BoolPolynomial*)candidate_poly current_theory:(NSMutableArray*)current_theory current_model:(BoolConcept*)current_model;

/*! Initializes power series with given concept and calculates
 @param theConcept concept to base on
 */
- (id)initWithConcept: (BoolConcept*)theConcept;    //Boolean Concept to base power series on

/*! Creates random concept and initializes power series instance
 @param numOfFeatures number of features
 @param numPositiveObjects number of positive objects in concept
 */
-(id)initCreateRandomConceptWithNumberOfFeatures:(int)numOfFeatures positiveObjects:(int)numPositiveObjects;


@end
